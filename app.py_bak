import os

from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session, jsonify
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, usd

from datetime import datetime

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True


# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///project.db")

GENDER_LIST = ["male", "female", "other"]


@app.route("/")
@login_required
def index():
    return render_template("index.html")


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure login was submitted
        if not request.form.get("login"):
            return apology("must provide login", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for login
        rows = db.execute("SELECT users_temp.id AS id, users_temp.hash AS hash, profiles.name AS name FROM (SELECT id, hash FROM users WHERE login = ?) AS users_temp LEFT JOIN profiles ON users_temp.id = profiles.users_id;", request.form.get("login"))

        # Ensure login exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid login and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Remember user's name
        session["user_name"] = rows[0]["name"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/profile", methods=["GET"])
@login_required
def profile():
    """User's profile"""
    rows = db.execute("SELECT * FROM profiles WHERE users_id = ?;", session["user_id"])
    rows[0]["gender_list"] = GENDER_LIST
    return render_template("profile.html", profile=rows[0])


@app.route("/update_name", methods=["POST"])
def update_name():
    try:
        db.execute("UPDATE profiles SET name = ? WHERE users_id = ?;", request.form.get("name"), session["user_id"])
        session["user_name"] = request.form.get("name")
        return jsonify(name=request.form.get("name"))
    except:
        return None


@app.route("/update_profile", methods=["POST"])
def update_profile():
    apology_t = ""
    apology_c = 400
    if request.form.get("gender") != "" and request.form.get("gender") not in GENDER_LIST:
        apology_t = "Gender was not recognized!"
        apology_c = 403
        return apology(apology_t, apology_c)
        
    try:
        query = "UPDATE profiles SET "
        query += " WHERE users_id = ?;"
        
        db.execute("UPDATE profiles SET gender = ?, birthdate = ?, education = ?, bio = ? WHERE users_id = ?;", request.form.get("gender")
                                                                                                              , request.form.get("birthdate")
                                                                                                              , request.form.get("education")
                                                                                                              , request.form.get("bio")
                                                                                                              , session["user_id"])
        flash("Profile update was successful!")
        return redirect("/profile")
    except (KeyError, TypeError, ValueError):
        if len(KeyError):
            apology_t += KeyError
        if len(TypeError):
            if len(apology_t):
                apology_t += "\n"
            apology_t += TypeError
        if len(ValueError):
            if len(apology_t):
                apology_t += "\n"
            apology_t += ValueError
            apology_c = 422

        if not len(apology_t):
            apology_t = "Unknown error"
            apology_c = 503
        return apology(apology_t, apology_c)


@app.route("/update_password", methods=["POST"])
@login_required
def password():
    """Change password"""
    db.execute("UPDATE users SET hash = ? WHERE id = ?;", generate_password_hash(request.form.get("password")), session["user_id"])
    flash("Your password has been changed successfully!")
    return redirect(request.url)


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""

    if request.method == "GET":
        return render_template("register.html")

    apology_t = ""
    apology_c = 400

    if not len(request.form.get("login")):
        apology_t = "login field is empty"
    elif not len(request.form.get("password")):
        apology_t = "Password field is empty"
    elif not request.form.get("password") == request.form.get("confirmation"):
        apology_t = "Wrong password confirmation"

    if len(apology_t):
        return apology(apology_t, apology_c)

    row = db.execute("SELECT * FROM users WHERE login = ?", request.form.get("login"))
    if len(row):
        apology_t = "login already exists"

    if len(apology_t):
        return apology(apology_t, apology_c)

    try:
        user_id = db.execute("INSERT INTO users (login, hash) VALUES (?, ?);", request.form.get("login"), generate_password_hash(request.form.get("password")))
        db.execute("INSERT INTO profiles (users_id) VALUES (?);", user_id)
        session["user_id"] = user_id
        flash("New user's registration with login \"{0}\" was successful!".format(request.form.get("login")))
        return redirect("/")
    except (KeyError, TypeError, ValueError):
        if len(KeyError):
            apology_t += KeyError
        if len(TypeError):
            if len(apology_t):
                apology_t += "\n"
            apology_t += TypeError
        if len(ValueError):
            if len(apology_t):
                apology_t += "\n"
            apology_t += ValueError
        apology_c = 422

    if not len(apology_t):
        apology_t = "Unknown error"
        apology_c = 503

    return apology(apology_t, apology_c)


@app.route("/_add_numbers")
def add_numbers():
    a = request.args.get("a", 0, type=int)
    b = request.args.get("b", 0, type=int)
    return jsonify(result=a + b)


def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)

